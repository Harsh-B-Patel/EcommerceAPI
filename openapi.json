{
  "openapi": "3.0.0",
  "info": {
    "title": "Ecommerce App API",
    "version": "1.0.0",
    "description": "Ecommerece Website Backend API"
  },
  "paths": {
    "/login": {
      "summary": "Allows customer to login using an existing account.",
      "post": {
        "summary": "Login using a username and a password.",
        "operationId": "login",
        "security": [],
        "requestBody": {
          "description": "Request body requirements for login requests",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Login"
                  }
                ]
              },
              "example": {
                "username": "alexnes",
                "password": "password"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Login",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "tags": [
          "Login"
        ]
      }
    },
    "/signup": {
      "summary": "SignUp customer to login using an existing account.",
      "post": {
        "summary": "SignUp using a username, password and UserInfo.",
        "operationId": "signup",
        "security": [],
        "requestBody": {
          "description": "Request body requirements for login requests",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignUpRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Login",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Login"
        ]
      }
    },
    "/user/{userId}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Find user by ID",
        "description": "Returns a single user",
        "operationId": "getUserById",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Updates a user in the store with form data",
        "description": "",
        "operationId": "updateUserWithForm",
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateUser"
        },
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Deletes a user",
        "description": "delete a user",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/product/{productId}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Find product by ID",
        "description": "Returns a single product",
        "operationId": "getProductById",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productId",
            "in": "path",
            "description": "Product ID to retrieve",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "creates/update a new product in the store with form data",
        "description": "",
        "operationId": "createProduct",
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateProduct"
        },
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productId",
            "in": "path",
            "description": "Product ID to create/update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      },
      "put": {
        "tags": [
          "Product"
        ],
        "summary": "Updates a exiting product in the store with form data",
        "description": "",
        "operationId": "updateProduct",
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateProduct"
        },
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productId",
            "in": "path",
            "description": "Product ID to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      },
      "delete": {
        "tags": [
          "Product"
        ],
        "summary": "Deletes a product",
        "description": "Deletes a product",
        "operationId": "deleteProduct",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productId",
            "in": "path",
            "description": "Product ID to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/user/{userId}/cart": {
      "summary": "Returns list of all cart items for a specific customer.",
      "description": "Allows customer to view, modify or clear their own cart.",
      "parameters": [
        {
          "name": "token",
          "in": "header",
          "description": "",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "userId",
          "in": "path",
          "description": "user ID to delete",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "int64"
          }
        }
      ],
      "get": {
        "summary": "Get customer's cart items.",
        "description": "View all of a customer's cart items, in a full format or as a simplified array.",
        "operationId": "get_cart_items",
        "responses": {
          "200": {
            "description": "get customer's cart items",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "tags": [
          "Cart"
        ]
      },
      "put": {
        "summary": "Update cart.",
        "description": "Allows customer to remove or add cart items and to modify their quantities.",
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateCart"
        },
        "operationId": "udpate_cart",
        "responses": {
          "200": {
            "description": "returns updated cart",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Cart"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorised"
          }
        },
        "tags": [
          "Cart"
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "Login": {
        "required": [
          "username",
          "password"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "alexnes"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "password"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "username": {
            "type": "string",
            "example": "theUser"
          },
          "firstName": {
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "example": "James"
          },
          "email": {
            "type": "string",
            "example": "john@email.com"
          },
          "phone": {
            "type": "string",
            "example": "12345"
          }
        },
        "xml": {
          "name": "user"
        }
      },
      "NewUser": {
        "type": "object",
        "required": [
          "firstName",
          "lastName"
        ],
        "properties": {
          "firstName": {
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "example": "James"
          },
          "email": {
            "type": "string",
            "example": "john@email.com"
          },
          "phone": {
            "type": "string",
            "example": "12345"
          }
        },
        "xml": {
          "name": "user"
        }
      },
      "Token": {
        "type": "string",
        "example": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "token": {
            "$ref": "#/components/schemas/Token"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "xml": {
          "name": "user"
        }
      },
      "SignUpRequest": {
        "type": "object",
        "properties": {
          "credentials": {
            "$ref": "#/components/schemas/Login"
          },
          "user": {
            "$ref": "#/components/schemas/NewUser"
          }
        },
        "xml": {
          "name": "user"
        }
      },
      "Product": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Rechargebale batteries"
          },
          "description": {
            "type": "string",
            "example": "Product description"
          },
          "price": {
            "type": "string",
            "example": 20.33
          },
          "stock": {
            "type": "integer",
            "example": 55
          },
          "categoryName": {
            "type": "string",
            "example": "Electronics"
          }
        }
      },
      "Cart": {
        "type": "object",
        "properties": {
          "cart": {
            "type": "object",
            "properties": {
              "userid": {
                "type": "integer",
                "example": 1
              },
              "username": {
                "type": "string",
                "example": "A-Marks9"
              },
              "cartItems": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "product": {
                      "$ref": "#/components/schemas/Product"
                    },
                    "quantity": {
                      "type": "integer",
                      "example": 6
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "requestBodies": {
      "UpdateCart": {
        "description": "request body requirements for updating a user's address",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Cart"
            }
          }
        }
      },
      "UpdateProduct": {
        "description": "request body requirements for updating a user's address",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Product"
            }
          }
        }
      },
      "UpdateUser": {
        "description": "request body requirements for updating a user's address",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      }
    },
    "responses": {
      "LoginResponse": {
        "description": "response returned upon successful login",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "customer": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "username": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "NotFound": {
        "description": "resource not found, such as for non-existent resources or invalid URL paths.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "errorMessage": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Unauthorised": {
        "description": "unauthorised action on a protected route, such as attempting to access or modify another customer's data",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "errorMessage": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "SignupError": {
        "description": "bad request casued by incomplete or invalid request bodies.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "errorMessage": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "InternalServerError": {
        "description": "InternalServerError",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "errorMessage": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "BadRequest": {
        "description": "bad request caused by missing, invalid or constraint-violating data in request bodies.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "errorMessage": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "BearerAuth": []
    }
  ]
}